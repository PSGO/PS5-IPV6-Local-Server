name: Daily PS5 Exploit Monitor

on:
  schedule:
    - cron: '0 0 * * *'  # 每天运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  check_and_process_ps5_exploit:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Create log directory if it doesn't exist
      - name: Create log directory
        run: mkdir -p log

      # Step 3: Get the latest commit hash from GitHub
      - name: Get the latest commit hash from GitHub
        id: get_commit
        run: |
          latest_commit=$(curl -s https://api.github.com/repos/idlesauce/PS5-Exploit-Host/commits/main | jq -r '.sha')
          echo "Latest commit hash: $latest_commit"
          echo $latest_commit > log/latest_commit.txt

      # Step 4: Get the latest commit message and commit URL
      - name: Get the latest commit message and URL
        id: get_commit_message
        run: |
          commit_message=$(curl -s https://api.github.com/repos/idlesauce/PS5-Exploit-Host/commits/main | jq -r '.commit.message' | tr -d '\n')
          commit_url="https://github.com/idlesauce/PS5-Exploit-Host/commit/$(cat log/latest_commit.txt)"
          echo "Commit message: $commit_message"
          echo "commit_message=$commit_message" >> $GITHUB_ENV
          echo "commit_url=$commit_url" >> $GITHUB_ENV

      # Step 5: Ensure previous_commit.txt exists and initialize if necessary
      - name: Ensure previous_commit.txt exists
        run: |
          if [ ! -f log/previous_commit.txt ]; then
            echo "no_previous_commit" > log/previous_commit.txt
          fi

      # Step 6: Compare with previous commit and set skip variable
      - name: Compare with previous commit and set skip variable
        id: check_commit
        run: |
          latest_commit=$(cat log/latest_commit.txt)
          previous_commit=$(cat log/previous_commit.txt)
          if [ "$latest_commit" == "$previous_commit" ]; then
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi

      # Step 7: Download repository archive if skip is not true
      - name: Download repository archive
        if: ${{ env.skip != 'true' }}
        run: curl -L https://github.com/idlesauce/PS5-Exploit-Host/archive/refs/heads/main.zip -o repo.zip

      # Step 8: Unzip repository archive
      - name: Unzip repository archive
        if: ${{ env.skip != 'true' }}
        run: unzip -q repo.zip

      # Step 9: Modify appcache_manifest_generator.py
      - name: Modify appcache_manifest_generator.py
        if: ${{ env.skip != 'true' }}
        run: |
          if grep -qE 'user_input = input\(f"Found .index.html.' PS5-UMTX-Jailbreak-main/appcache_manifest_generator.py; then
            sed -i '/user_input = input(f"Found .index.html./,/exit(1)/d' PS5-UMTX-Jailbreak-main/appcache_manifest_generator.py
          fi

      # Step 9: Run appcache_manifest_generator.py
      - name: Run appcache_manifest_generator.py
        if: ${{ env.skip != 'true' }}
        run: |
          cd PS5-Exploit-Host-main
          python3 appcache_manifest_generator.py

      # Step 10: Move ps5 folder contents to target directory
      - name: Move ps5 folder contents to target directory
        if: ${{ env.skip != 'true' }}
        run: |
          mkdir -p files/exploit/host/PSGO/
          mv PS5-Exploit-Host-main/document/en/ps5/* files/exploit/host/PSGO/

      # Step 11: Delete repo.zip and PS5-Exploit-Host-main
      - name: Delete repo.zip and PS5-Exploit-Host-main
        if: ${{ env.skip != 'true' }}
        run: rm -rf repo.zip PS5-Exploit-Host-main

      # Step 12: Create compressed package (dynamic version)
      - name: Create compressed package (dynamic version)
        if: ${{ env.skip != 'true' }}
        run: |
          zip_name="PS5_IPV6-Windows_Local_Server-Offline_Cache.zip"
          if [[ "${{ github.run_number }}" != "" ]]; then
            zip_name="PS5_IPV6-Windows_Local_Server-Offline_Cache-${{ github.run_number }}.zip"
          fi
          zip -r $zip_name ./*
          echo "zip_name=$zip_name" >> $GITHUB_ENV

      # Step 13: Release dynamic version
      - name: Release dynamic version
        if: ${{ env.skip != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create PS5-IPV6-1.0${{ github.run_number }} ${{ env.zip_name }} \
          --target ${{ github.sha }} \
          -t "PS5-IPV6-1.0${{ github.run_number }}" \
          -n "${{ env.commit_message }}  ${{ env.commit_url }}"

      # Step 14: Delete old latest release (if exists)
      - name: Delete old latest release
        if: ${{ env.skip != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release delete latest --yes || true

      # Step 15: Create latest fixed release
      - name: Create latest fixed release
        if: ${{ env.skip != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # For fixed version, we revert the zip file name back to the original name without version
          fixed_zip_name="PS5_IPV6-Windows_Local_Server-Offline_Cache.zip"
          mv ${{ env.zip_name }} $fixed_zip_name
          gh release create latest $fixed_zip_name \
          --target ${{ github.sha }} \
          -t "PS5-IPV6-1.0${{ github.run_number }}" \
          -n "${{ env.commit_message }}  ${{ env.commit_url }}"

      # Step 16: Update commit hash log
      - name: Commit and push commit info to log directory
        if: ${{ env.skip != 'true' }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          echo "$(cat log/latest_commit.txt)" > log/previous_commit.txt
          git add log/previous_commit.txt log/latest_commit.txt
          git commit -m "Update commit hash records"
          git push origin main
